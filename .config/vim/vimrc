" Last change:  2014-04-25

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set ignorecase		" case insensitive searching
set smartcase		" disable ignorecase when inputting uppercase
set autoindent		" auto indent on newline if starting from indent

" Allow multiple files to be opened at once by hiding inactive ones instead of closing them

set hidden

" Set numbers along left and colours

highlight LineNr ctermfg=250
highlight CursorLineNr ctermfg=245
set number

" Set cursor line highlighting and colours

highlight CursorLine cterm=NONE ctermbg=254
set cursorline

" Minimum of 5 lines above and below cursor must be visible

set scrolloff=5

" change directories for swap and backup files

set directory=~/.local/share/vim/swap//,/tmp
set backupdir=~/.local/share/vim/backup,/tmp

" change directory for vimrc etc
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

" set backup files to contain timestamp in format _YYYYMMDD-HHMM

let backupextvar = strftime("%Y%m%d-%H%M")
let backupextvar = "set backupext=_". backupextvar
execute backupextvar

" the following is required for word wrap to not break in the middle of words

set wrap
set linebreak
set nolist

" allow up to 1000 lines to be copied in vim instead of default 50
" also change viminfo location using n
" note previous saved sessions will still use old viminfo location and recreate it

set viminfo='100,<1000,s10,h,n~/.local/share/vim/viminfo

" disable intro message when opening vim alone

set shortmess+=I

" set spellcheck language to canadian and cjk ignores east asian

set spelllang=en_ca,cjk

" Don't use Ex mode, use Q for formatting
" map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  "filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  "autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


" Script modified from vim.wikia.com/wiki/VimTip1202
" Note that this requires you to make the initial session.vim manually
" using :mksession ~/.local/share/vim/session/session.vim ONLY the first time

" if argc() == 0 means only run if vim is called without arguments

" function to update a session, BUT ONLY IF IT ALREADY EXISTS
function! UpdateSession()
  if argc() == 0
    let b:sessiondir = $HOME . "/.local/share/vim/session"
    let b:sessionfile = b:sessiondir . "/session.vim"
    if (filereadable(b:sessionfile))
      exe "mksession! " . b:sessionfile
      echo "updating session"
    endif
  endif
endfunction


" function to load session on exit
function! LoadSession()
  if argc() == 0
    let b:sessiondir = $HOME . "/.local/share/vim/session"
    let b:sessionfile = b:sessiondir . "/session.vim"
    if (filereadable(b:sessionfile))
      exe 'source ' b:sessionfile
    else
      echo "No session loaded."
    endif
  else
    let b:sessionfile = ""
    let b:sessiondir = ""
  endif
endfunction


" autoload the session when running vim
au VimEnter * nested :call LoadSession()

" autosave the session on exiting vim
au VimLeave * nested :call UpdateSession()
